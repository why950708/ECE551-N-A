|follower
clk => clk.IN3
RST_n => rst_n.ACLR
RST_n => rst_ff_n.ACLR
led[0] << motor_cntrl:iMTR.rev_rht
led[1] << motor_cntrl:iMTR.fwd_rht
led[2] << motor_cntrl:iMTR.rev_lft
led[3] << motor_cntrl:iMTR.fwd_lft
led[4] << <GND>
led[5] << <GND>
led[6] << <GND>
led[7] << <GND>
a2d_SS_n << <GND>
SCLK << <GND>
MISO => ~NO_FANOUT~
MOSI << <GND>
rev_rht << motor_cntrl:iMTR.rev_rht
rev_lft << motor_cntrl:iMTR.rev_lft
fwd_rht << motor_cntrl:iMTR.fwd_rht
fwd_lft << motor_cntrl:iMTR.fwd_lft
IR_in_en << <GND>
IR_mid_en << <GND>
IR_out_en << <GND>
in_transit << <GND>
OK2Move => ~NO_FANOUT~
buzz << <GND>
buzz_n << <GND>
BC => ~NO_FANOUT~
TX << uart_tx:iUART_tx.tx
RX => RX.IN1


|follower|uart_rcv:iCMD
clr_rx_rdy => always7.IN1
clk => rx_data[0]~reg0.CLK
clk => rx_data[1]~reg0.CLK
clk => rx_data[2]~reg0.CLK
clk => rx_data[3]~reg0.CLK
clk => rx_data[4]~reg0.CLK
clk => rx_data[5]~reg0.CLK
clk => rx_data[6]~reg0.CLK
clk => rx_data[7]~reg0.CLK
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => shift_reg[8].CLK
clk => rx_rdy~reg0.CLK
clk => bit_cnt[0].CLK
clk => bit_cnt[1].CLK
clk => bit_cnt[2].CLK
clk => bit_cnt[3].CLK
clk => baud_cnt[0].CLK
clk => baud_cnt[1].CLK
clk => baud_cnt[2].CLK
clk => baud_cnt[3].CLK
clk => baud_cnt[4].CLK
clk => baud_cnt[5].CLK
clk => baud_cnt[6].CLK
clk => baud_cnt[7].CLK
clk => baud_cnt[8].CLK
clk => baud_cnt[9].CLK
clk => baud_cnt[10].CLK
clk => baud_cnt[11].CLK
clk => RX2.CLK
clk => RX1.CLK
clk => state~1.DATAIN
rst_n => baud_cnt[0].ACLR
rst_n => baud_cnt[1].ACLR
rst_n => baud_cnt[2].ACLR
rst_n => baud_cnt[3].ACLR
rst_n => baud_cnt[4].ACLR
rst_n => baud_cnt[5].ACLR
rst_n => baud_cnt[6].ACLR
rst_n => baud_cnt[7].ACLR
rst_n => baud_cnt[8].ACLR
rst_n => baud_cnt[9].ACLR
rst_n => baud_cnt[10].ACLR
rst_n => baud_cnt[11].ACLR
rst_n => rx_data[0]~reg0.ACLR
rst_n => rx_data[1]~reg0.ACLR
rst_n => rx_data[2]~reg0.ACLR
rst_n => rx_data[3]~reg0.ACLR
rst_n => rx_data[4]~reg0.ACLR
rst_n => rx_data[5]~reg0.ACLR
rst_n => rx_data[6]~reg0.ACLR
rst_n => rx_data[7]~reg0.ACLR
rst_n => rx_rdy~reg0.ACLR
rst_n => bit_cnt[0].ACLR
rst_n => bit_cnt[1].ACLR
rst_n => bit_cnt[2].ACLR
rst_n => bit_cnt[3].ACLR
rst_n => shift_reg[0].ACLR
rst_n => shift_reg[1].ACLR
rst_n => shift_reg[2].ACLR
rst_n => shift_reg[3].ACLR
rst_n => shift_reg[4].ACLR
rst_n => shift_reg[5].ACLR
rst_n => shift_reg[6].ACLR
rst_n => shift_reg[7].ACLR
rst_n => shift_reg[8].ACLR
rst_n => state~3.DATAIN
RX => RX1.DATAIN
rx_rdy <= rx_rdy~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[0] <= rx_data[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[1] <= rx_data[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[2] <= rx_data[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[3] <= rx_data[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[4] <= rx_data[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[5] <= rx_data[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[6] <= rx_data[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[7] <= rx_data[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|follower|uart_tx:iUART_tx
clk => tx_done~reg0.CLK
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => shift_reg[8].CLK
clk => baud_cnt[0].CLK
clk => baud_cnt[1].CLK
clk => baud_cnt[2].CLK
clk => baud_cnt[3].CLK
clk => baud_cnt[4].CLK
clk => baud_cnt[5].CLK
clk => baud_cnt[6].CLK
clk => baud_cnt[7].CLK
clk => baud_cnt[8].CLK
clk => baud_cnt[9].CLK
clk => baud_cnt[10].CLK
clk => baud_cnt[11].CLK
clk => bit_cnt[0].CLK
clk => bit_cnt[1].CLK
clk => bit_cnt[2].CLK
clk => bit_cnt[3].CLK
clk => state.CLK
rst_n => shift_reg[0].PRESET
rst_n => shift_reg[1].PRESET
rst_n => shift_reg[2].PRESET
rst_n => shift_reg[3].PRESET
rst_n => shift_reg[4].PRESET
rst_n => shift_reg[5].PRESET
rst_n => shift_reg[6].PRESET
rst_n => shift_reg[7].PRESET
rst_n => shift_reg[8].PRESET
rst_n => tx_done~reg0.ACLR
rst_n => state.ACLR
rst_n => bit_cnt[0].ACLR
rst_n => bit_cnt[1].ACLR
rst_n => bit_cnt[2].ACLR
rst_n => bit_cnt[3].ACLR
rst_n => baud_cnt[0].PRESET
rst_n => baud_cnt[1].PRESET
rst_n => baud_cnt[2].ACLR
rst_n => baud_cnt[3].ACLR
rst_n => baud_cnt[4].PRESET
rst_n => baud_cnt[5].ACLR
rst_n => baud_cnt[6].PRESET
rst_n => baud_cnt[7].PRESET
rst_n => baud_cnt[8].PRESET
rst_n => baud_cnt[9].ACLR
rst_n => baud_cnt[10].PRESET
rst_n => baud_cnt[11].ACLR
tx <= shift_reg[0].DB_MAX_OUTPUT_PORT_TYPE
strt_tx => tx_done.OUTPUTSELECT
strt_tx => nxt_state.DATAA
strt_tx => load.DATAA
tx_data[0] => shift_reg.DATAB
tx_data[1] => shift_reg.DATAB
tx_data[2] => shift_reg.DATAB
tx_data[3] => shift_reg.DATAB
tx_data[4] => shift_reg.DATAB
tx_data[5] => shift_reg.DATAB
tx_data[6] => shift_reg.DATAB
tx_data[7] => shift_reg.DATAB
tx_done <= tx_done~reg0.DB_MAX_OUTPUT_PORT_TYPE


|follower|motor_cntrl:iMTR
clk => clk.IN2
rst_n => rst_n.IN2
lft[0] => lft[0].IN1
lft[1] => lft[1].IN1
lft[2] => lft[2].IN1
lft[3] => lft[3].IN1
lft[4] => lft[4].IN1
lft[5] => lft[5].IN1
lft[6] => lft[6].IN1
lft[7] => lft[7].IN1
lft[8] => lft[8].IN1
lft[9] => lft[9].IN1
lft[10] => WideOr0.IN0
lft[10] => fwd_lft.OUTPUTSELECT
lft[10] => rev_lft.OUTPUTSELECT
rht[0] => rht[0].IN1
rht[1] => rht[1].IN1
rht[2] => rht[2].IN1
rht[3] => rht[3].IN1
rht[4] => rht[4].IN1
rht[5] => rht[5].IN1
rht[6] => rht[6].IN1
rht[7] => rht[7].IN1
rht[8] => rht[8].IN1
rht[9] => rht[9].IN1
rht[10] => WideOr1.IN0
rht[10] => fwd_rht.OUTPUTSELECT
rht[10] => rev_rht.OUTPUTSELECT
fwd_lft <= fwd_lft.DB_MAX_OUTPUT_PORT_TYPE
rev_lft <= rev_lft.DB_MAX_OUTPUT_PORT_TYPE
fwd_rht <= fwd_rht.DB_MAX_OUTPUT_PORT_TYPE
rev_rht <= rev_rht.DB_MAX_OUTPUT_PORT_TYPE


|follower|motor_cntrl:iMTR|pwm:pwm_lft
duty[0] => LessThan0.IN10
duty[1] => LessThan0.IN9
duty[2] => LessThan0.IN8
duty[3] => LessThan0.IN7
duty[4] => LessThan0.IN6
duty[5] => LessThan0.IN5
duty[6] => LessThan0.IN4
duty[7] => LessThan0.IN3
duty[8] => LessThan0.IN2
duty[9] => LessThan0.IN1
clk => cnt[0].CLK
clk => cnt[1].CLK
clk => cnt[2].CLK
clk => cnt[3].CLK
clk => cnt[4].CLK
clk => cnt[5].CLK
clk => cnt[6].CLK
clk => cnt[7].CLK
clk => cnt[8].CLK
clk => cnt[9].CLK
clk => pwm_sig~reg0.CLK
rst_n => cnt[0].ACLR
rst_n => cnt[1].ACLR
rst_n => cnt[2].ACLR
rst_n => cnt[3].ACLR
rst_n => cnt[4].ACLR
rst_n => cnt[5].ACLR
rst_n => cnt[6].ACLR
rst_n => cnt[7].ACLR
rst_n => cnt[8].ACLR
rst_n => cnt[9].ACLR
rst_n => pwm_sig~reg0.ACLR
pwm_sig <= pwm_sig~reg0.DB_MAX_OUTPUT_PORT_TYPE


|follower|motor_cntrl:iMTR|pwm:pwm_rht
duty[0] => LessThan0.IN10
duty[1] => LessThan0.IN9
duty[2] => LessThan0.IN8
duty[3] => LessThan0.IN7
duty[4] => LessThan0.IN6
duty[5] => LessThan0.IN5
duty[6] => LessThan0.IN4
duty[7] => LessThan0.IN3
duty[8] => LessThan0.IN2
duty[9] => LessThan0.IN1
clk => cnt[0].CLK
clk => cnt[1].CLK
clk => cnt[2].CLK
clk => cnt[3].CLK
clk => cnt[4].CLK
clk => cnt[5].CLK
clk => cnt[6].CLK
clk => cnt[7].CLK
clk => cnt[8].CLK
clk => cnt[9].CLK
clk => pwm_sig~reg0.CLK
rst_n => cnt[0].ACLR
rst_n => cnt[1].ACLR
rst_n => cnt[2].ACLR
rst_n => cnt[3].ACLR
rst_n => cnt[4].ACLR
rst_n => cnt[5].ACLR
rst_n => cnt[6].ACLR
rst_n => cnt[7].ACLR
rst_n => cnt[8].ACLR
rst_n => cnt[9].ACLR
rst_n => pwm_sig~reg0.ACLR
pwm_sig <= pwm_sig~reg0.DB_MAX_OUTPUT_PORT_TYPE


